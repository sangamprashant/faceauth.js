[
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "users",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "users",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "project",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "users",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "history",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "users",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "notifications",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "project",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "decode_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "decode_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "decode_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "decode_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "RegistrationSchema",
        "importPath": "schema.user",
        "description": "schema.user",
        "isExtraImport": true,
        "detail": "schema.user",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "Schema",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "auth.sendmail",
        "description": "auth.sendmail",
        "isExtraImport": true,
        "detail": "auth.sendmail",
        "documentation": {}
    },
    {
        "label": "VerifyToken",
        "importPath": "auth.role",
        "description": "auth.role",
        "isExtraImport": true,
        "detail": "auth.role",
        "documentation": {}
    },
    {
        "label": "VerifyToken",
        "importPath": "auth.role",
        "description": "auth.role",
        "isExtraImport": true,
        "detail": "auth.role",
        "documentation": {}
    },
    {
        "label": "VerifyToken",
        "importPath": "auth.role",
        "description": "auth.role",
        "isExtraImport": true,
        "detail": "auth.role",
        "documentation": {}
    },
    {
        "label": "VerifyToken",
        "importPath": "auth.role",
        "description": "auth.role",
        "isExtraImport": true,
        "detail": "auth.role",
        "documentation": {}
    },
    {
        "label": "add_history_action",
        "importPath": "routes.history",
        "description": "routes.history",
        "isExtraImport": true,
        "detail": "routes.history",
        "documentation": {}
    },
    {
        "label": "add_history_action",
        "importPath": "routes.history",
        "description": "routes.history",
        "isExtraImport": true,
        "detail": "routes.history",
        "documentation": {}
    },
    {
        "label": "history_bp",
        "importPath": "routes.history",
        "description": "routes.history",
        "isExtraImport": true,
        "detail": "routes.history",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "add_notification_action",
        "importPath": "routes.notification",
        "description": "routes.notification",
        "isExtraImport": true,
        "detail": "routes.notification",
        "documentation": {}
    },
    {
        "label": "notifications_bp",
        "importPath": "routes.notification",
        "description": "routes.notification",
        "isExtraImport": true,
        "detail": "routes.notification",
        "documentation": {}
    },
    {
        "label": "PyMongo",
        "importPath": "flask_pymongo",
        "description": "flask_pymongo",
        "isExtraImport": true,
        "detail": "flask_pymongo",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "auth_bp",
        "importPath": "auth.views",
        "description": "auth.views",
        "isExtraImport": true,
        "detail": "auth.views",
        "documentation": {}
    },
    {
        "label": "project_bp",
        "importPath": "routes.project",
        "description": "routes.project",
        "isExtraImport": true,
        "detail": "routes.project",
        "documentation": {}
    },
    {
        "label": "api_bp",
        "importPath": "routes.API",
        "description": "routes.API",
        "isExtraImport": true,
        "detail": "routes.API",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "VerifyToken",
        "kind": 2,
        "importPath": "python-server.auth.role",
        "description": "python-server.auth.role",
        "peekOfCode": "def VerifyToken(token, expected_type):\n    claims = token.get('type')\n    if claims != expected_type:\n        return jsonify({\"message\": \"Invalid token type\", \"success\": False}), 403",
        "detail": "python-server.auth.role",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "kind": 2,
        "importPath": "python-server.auth.sendmail",
        "description": "python-server.auth.sendmail",
        "peekOfCode": "def send_mail(email, token):\n    # Define email sender and receiver\n    sender_email = app.config['EMAIL_SENDER']\n    receiver_email = email\n    password = app.config['EMAIL_PASSWORD']\n    # public link \n    publicLink = app.config['PUBLIC_LINK']\n    # Create the email subject and HTML content\n    subject = \"Verify Your Account\"\n    verify_link = f\"{publicLink}/verify?token={token}\"",
        "detail": "python-server.auth.sendmail",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "python-server.auth.views",
        "description": "python-server.auth.views",
        "peekOfCode": "def register():\n    try:\n        data = request.json\n        # Validate the request data against the schema\n        registration_schema = RegistrationSchema()\n        registration_schema.validate(data)\n        email = data.get('email')\n        fname = data.get('fname')\n        sname = data.get('sname')\n        # Check if user with the given email already exists",
        "detail": "python-server.auth.views",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "python-server.auth.views",
        "description": "python-server.auth.views",
        "peekOfCode": "def login():\n    email = request.json.get('email')\n    user = users.find_one({'email': email})\n    if not user:\n        return jsonify({\"msg\": \"User not found\"}), 404\n    token = create_access_token(identity=str(user['_id']), expires_delta=timedelta(minutes=10), additional_claims={\"type\": \"verification\"})\n    send_mail(email, token)\n    return jsonify({\"success\": True,}), 200\n# verify the user\n@auth_bp.route('/verify', methods=['GET'])",
        "detail": "python-server.auth.views",
        "documentation": {}
    },
    {
        "label": "verify_user",
        "kind": 2,
        "importPath": "python-server.auth.views",
        "description": "python-server.auth.views",
        "peekOfCode": "def verify_user():\n    try:\n        decoded_token = decode_token(request.headers.get('Authorization').split()[1])\n        response = VerifyToken(decoded_token, \"verification\")\n        if response:\n            return response\n        user_id = decoded_token['sub']\n        user = users.find_one({'_id': ObjectId(user_id)})\n        if not user:\n            return jsonify({\"message\": \"User not found\", \"success\": False}), 404",
        "detail": "python-server.auth.views",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "python-server.auth.views",
        "description": "python-server.auth.views",
        "peekOfCode": "def profile():\n    try:\n        decoded_token = decode_token(request.headers.get('Authorization').split()[1])\n        response = VerifyToken(decoded_token, \"access\")\n        if response:\n            return response\n        user_id = get_jwt_identity()\n        user = users.find_one({'_id': ObjectId(user_id)})\n        if not user:\n            return jsonify({\"message\": \"User not found\", \"success\": False}), 404",
        "detail": "python-server.auth.views",
        "documentation": {}
    },
    {
        "label": "auth_bp",
        "kind": 5,
        "importPath": "python-server.auth.views",
        "description": "python-server.auth.views",
        "peekOfCode": "auth_bp = Blueprint('auth', __name__)\n# Register\n@auth_bp.route('/register', methods=['POST'])\ndef register():\n    try:\n        data = request.json\n        # Validate the request data against the schema\n        registration_schema = RegistrationSchema()\n        registration_schema.validate(data)\n        email = data.get('email')",
        "detail": "python-server.auth.views",
        "documentation": {}
    },
    {
        "label": "get_user_and_project",
        "kind": 2,
        "importPath": "python-server.routes.API",
        "description": "python-server.routes.API",
        "peekOfCode": "def get_user_and_project(authorization_header, project_id):\n    try:\n        _, api_key = authorization_header.split('Bearer ')\n        user = users.find_one({'api_key': api_key})\n        if not user:\n            return None, None\n        user['_id'] = str(user['_id'])\n        project_data = project.find_one({'project_id': project_id, 'user_id': user['_id']})\n        if not project_data:\n            return None, None",
        "detail": "python-server.routes.API",
        "documentation": {}
    },
    {
        "label": "detect_faces",
        "kind": 2,
        "importPath": "python-server.routes.API",
        "description": "python-server.routes.API",
        "peekOfCode": "def detect_faces(face_images):\n    best_face_image = None\n    max_faces = 0\n    for face_image in face_images:\n        image = cv2.imdecode(np.frombuffer(face_image.read(), np.uint8), cv2.IMREAD_COLOR)\n        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n        faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))\n        if len(faces) > max_faces:\n            max_faces = len(faces)\n            best_face_image = image",
        "detail": "python-server.routes.API",
        "documentation": {}
    },
    {
        "label": "get_face_encodings",
        "kind": 2,
        "importPath": "python-server.routes.API",
        "description": "python-server.routes.API",
        "peekOfCode": "def get_face_encodings(faces, best_face_image):\n    face_encodings = []\n    for (x, y, w, h) in faces:\n        face = best_face_image[y:y+h, x:x+w]\n        face_blob = cv2.dnn.blobFromImage(face, 1.0 / 255, (96, 96), (0, 0, 0), swapRB=True, crop=False)\n        facenet_model.setInput(face_blob)\n        encoding = facenet_model.forward()\n        face_encodings.append(encoding.flatten())\n    return face_encodings\n@api_bp.route(\"/authorization\", methods=['POST'])",
        "detail": "python-server.routes.API",
        "documentation": {}
    },
    {
        "label": "get_user_by_api_key",
        "kind": 2,
        "importPath": "python-server.routes.API",
        "description": "python-server.routes.API",
        "peekOfCode": "def get_user_by_api_key():\n    try:\n        authorization_header = request.headers.get('Authorization')\n        project_id = request.headers.get('X-Project-Code')\n        pin = request.form.get('pin')\n        payload = json.loads(request.form.get('payload', \"{}\"))\n        face_images = request.files.getlist('face_images')\n        if not authorization_header or not project_id:\n            return jsonify({\"message\": \"Authorization header and Project code are required\", \"success\": False}), 400\n        user, project_data = get_user_and_project(authorization_header, project_id)",
        "detail": "python-server.routes.API",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "python-server.routes.API",
        "description": "python-server.routes.API",
        "peekOfCode": "def login():\n    try:\n        authorization_header = request.headers.get('Authorization')\n        project_id = request.headers.get('X-Project-Code')\n        pin = request.form.get('pin')\n        face_images = request.files.getlist('face_images')\n        if not authorization_header or not project_id:\n            return jsonify({\"message\": \"Authorization header and Project code are required\", \"success\": False}), 400\n        if not pin or len(pin) != 6 or not pin.isdigit():\n            return jsonify({\"error\": \"PIN must be a 6-digit number\", \"success\": False}), 400",
        "detail": "python-server.routes.API",
        "documentation": {}
    },
    {
        "label": "api_bp",
        "kind": 5,
        "importPath": "python-server.routes.API",
        "description": "python-server.routes.API",
        "peekOfCode": "api_bp = Blueprint('api', __name__)\n# Load pre-trained models\nface_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\nfacenet_model = cv2.dnn.readNetFromTorch(\"models/openface.nn4.small2.v1.t7\")\ndef get_user_and_project(authorization_header, project_id):\n    try:\n        _, api_key = authorization_header.split('Bearer ')\n        user = users.find_one({'api_key': api_key})\n        if not user:\n            return None, None",
        "detail": "python-server.routes.API",
        "documentation": {}
    },
    {
        "label": "face_cascade",
        "kind": 5,
        "importPath": "python-server.routes.API",
        "description": "python-server.routes.API",
        "peekOfCode": "face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\nfacenet_model = cv2.dnn.readNetFromTorch(\"models/openface.nn4.small2.v1.t7\")\ndef get_user_and_project(authorization_header, project_id):\n    try:\n        _, api_key = authorization_header.split('Bearer ')\n        user = users.find_one({'api_key': api_key})\n        if not user:\n            return None, None\n        user['_id'] = str(user['_id'])\n        project_data = project.find_one({'project_id': project_id, 'user_id': user['_id']})",
        "detail": "python-server.routes.API",
        "documentation": {}
    },
    {
        "label": "facenet_model",
        "kind": 5,
        "importPath": "python-server.routes.API",
        "description": "python-server.routes.API",
        "peekOfCode": "facenet_model = cv2.dnn.readNetFromTorch(\"models/openface.nn4.small2.v1.t7\")\ndef get_user_and_project(authorization_header, project_id):\n    try:\n        _, api_key = authorization_header.split('Bearer ')\n        user = users.find_one({'api_key': api_key})\n        if not user:\n            return None, None\n        user['_id'] = str(user['_id'])\n        project_data = project.find_one({'project_id': project_id, 'user_id': user['_id']})\n        if not project_data:",
        "detail": "python-server.routes.API",
        "documentation": {}
    },
    {
        "label": "add_history_action",
        "kind": 2,
        "importPath": "python-server.routes.history",
        "description": "python-server.routes.history",
        "peekOfCode": "def add_history_action(user_id, action):\n    timestamp = datetime.now(timezone.utc).isoformat()\n    history_entry = {\"action\": action, \"timestamp\": timestamp}\n    history.update_one(\n        {'user_id': ObjectId(user_id)},\n        {'$push': {'actions': history_entry}},\n        upsert=True\n    )\n@history_bp.route('/retrieve', methods=['GET'])\n@jwt_required()",
        "detail": "python-server.routes.history",
        "documentation": {}
    },
    {
        "label": "history_retrieve",
        "kind": 2,
        "importPath": "python-server.routes.history",
        "description": "python-server.routes.history",
        "peekOfCode": "def history_retrieve():\n    try:\n        decoded_token = decode_token(request.headers.get('Authorization').split()[1])\n        response = VerifyToken(decoded_token, \"access\")\n        if response:\n            return response\n        user_id = get_jwt_identity()\n        user = users.find_one({'_id': ObjectId(user_id)})\n        if not user:\n            return jsonify({\"message\": \"User not found\", \"success\": False}), 404",
        "detail": "python-server.routes.history",
        "documentation": {}
    },
    {
        "label": "history_bp",
        "kind": 5,
        "importPath": "python-server.routes.history",
        "description": "python-server.routes.history",
        "peekOfCode": "history_bp = Blueprint('history', __name__)\n# Function to add a new action to a user's history\ndef add_history_action(user_id, action):\n    timestamp = datetime.now(timezone.utc).isoformat()\n    history_entry = {\"action\": action, \"timestamp\": timestamp}\n    history.update_one(\n        {'user_id': ObjectId(user_id)},\n        {'$push': {'actions': history_entry}},\n        upsert=True\n    )",
        "detail": "python-server.routes.history",
        "documentation": {}
    },
    {
        "label": "add_notification_action",
        "kind": 2,
        "importPath": "python-server.routes.notification",
        "description": "python-server.routes.notification",
        "peekOfCode": "def add_notification_action(user_id, action):\n    try:\n        notification_entry = {\"_id\": str(ObjectId()), \"action\": action, \"seen\": False}\n        notifications.update_one(\n            {'user_id': str(user_id)},  # Ensuring user_id is a string\n            {'$push': {'actions': notification_entry}},\n            upsert=True\n        )\n    except Exception as e:\n        app.logger.error(f\"Error adding notification action: {str(e)}\")",
        "detail": "python-server.routes.notification",
        "documentation": {}
    },
    {
        "label": "notifications_retrieve",
        "kind": 2,
        "importPath": "python-server.routes.notification",
        "description": "python-server.routes.notification",
        "peekOfCode": "def notifications_retrieve():\n    try:\n        decoded_token = decode_token(request.headers.get('Authorization').split()[1])\n        response = VerifyToken(decoded_token, \"access\")\n        if response:\n            return response\n        user_id = get_jwt_identity()\n        user = users.find_one({'_id': ObjectId(user_id)})\n        if not user:\n            return jsonify({\"message\": \"User not found\", \"success\": False}), 404",
        "detail": "python-server.routes.notification",
        "documentation": {}
    },
    {
        "label": "mark_as_seen",
        "kind": 2,
        "importPath": "python-server.routes.notification",
        "description": "python-server.routes.notification",
        "peekOfCode": "def mark_as_seen():\n    try:\n        decoded_token = decode_token(request.headers.get('Authorization').split()[1])\n        response = VerifyToken(decoded_token, \"access\")\n        if response:\n            return response\n        user_id = get_jwt_identity()\n        notification_id = request.json.get('notification_id')\n        if not notification_id:\n            return jsonify({\"message\": \"Notification ID is required\", \"success\": False}), 400",
        "detail": "python-server.routes.notification",
        "documentation": {}
    },
    {
        "label": "notifications_bp",
        "kind": 5,
        "importPath": "python-server.routes.notification",
        "description": "python-server.routes.notification",
        "peekOfCode": "notifications_bp = Blueprint('notifications', __name__)\n# Function to add a new action to a user's notifications\ndef add_notification_action(user_id, action):\n    try:\n        notification_entry = {\"_id\": str(ObjectId()), \"action\": action, \"seen\": False}\n        notifications.update_one(\n            {'user_id': str(user_id)},  # Ensuring user_id is a string\n            {'$push': {'actions': notification_entry}},\n            upsert=True\n        )",
        "detail": "python-server.routes.notification",
        "documentation": {}
    },
    {
        "label": "create_project",
        "kind": 2,
        "importPath": "python-server.routes.project",
        "description": "python-server.routes.project",
        "peekOfCode": "def create_project():\n    decoded_token = decode_token(request.headers.get('Authorization').split()[1])\n    response = VerifyToken(decoded_token, \"access\")\n    if response:\n        return response\n    user_id = get_jwt_identity()\n    project_name = request.json.get('p_name')\n    project_description = request.json.get('p_description')\n    project_active = request.json.get('p_active')\n    project_image  = request.json.get(\"p_image\")",
        "detail": "python-server.routes.project",
        "documentation": {}
    },
    {
        "label": "list_projects",
        "kind": 2,
        "importPath": "python-server.routes.project",
        "description": "python-server.routes.project",
        "peekOfCode": "def list_projects():\n    decoded_token = decode_token(request.headers.get('Authorization').split()[1])\n    response = VerifyToken(decoded_token, \"access\")\n    if response:\n        return response\n    user_id = get_jwt_identity()\n    projects = list(project.find({'user_id': user_id}))\n    for p in projects:\n        p.pop('users', None)\n        p['_id'] = str(p['_id'])",
        "detail": "python-server.routes.project",
        "documentation": {}
    },
    {
        "label": "get_project",
        "kind": 2,
        "importPath": "python-server.routes.project",
        "description": "python-server.routes.project",
        "peekOfCode": "def get_project(project_id):\n    try:\n        # Decode JWT token and verify access\n        decoded_token = decode_token(request.headers.get('Authorization').split()[1])\n        response = VerifyToken(decoded_token, \"access\")\n        if response:\n            return response\n        # Get user ID from token\n        user_id = get_jwt_identity()\n        # Check if the project exists and belongs to the user",
        "detail": "python-server.routes.project",
        "documentation": {}
    },
    {
        "label": "toggle_project_active",
        "kind": 2,
        "importPath": "python-server.routes.project",
        "description": "python-server.routes.project",
        "peekOfCode": "def toggle_project_active(project_id):\n    try:\n        # Decode JWT token and verify access\n        decoded_token = decode_token(request.headers.get('Authorization').split()[1])\n        response = VerifyToken(decoded_token, \"access\")\n        if response:\n            return response\n        # Get user ID from token\n        user_id = get_jwt_identity()\n        # Check if the project exists and belongs to the user",
        "detail": "python-server.routes.project",
        "documentation": {}
    },
    {
        "label": "project_bp",
        "kind": 5,
        "importPath": "python-server.routes.project",
        "description": "python-server.routes.project",
        "peekOfCode": "project_bp = Blueprint('project', __name__)\n@project_bp.route('/create', methods=['POST'])\n@jwt_required()\ndef create_project():\n    decoded_token = decode_token(request.headers.get('Authorization').split()[1])\n    response = VerifyToken(decoded_token, \"access\")\n    if response:\n        return response\n    user_id = get_jwt_identity()\n    project_name = request.json.get('p_name')",
        "detail": "python-server.routes.project",
        "documentation": {}
    },
    {
        "label": "RegistrationSchema",
        "kind": 6,
        "importPath": "python-server.schema.user",
        "description": "python-server.schema.user",
        "peekOfCode": "class RegistrationSchema(Schema):\n    email = fields.Email(required=True)\n    fname = fields.Str(required=True)\n    sname = fields.Str(required=True)\n    # Custom validation method to ensure all fields are present\n    def validate(self, data, **kwargs):\n        if not data.get('email') or not data.get('fname') or not data.get('sname'):\n            raise ValidationError(\"All fields are required fields\")",
        "detail": "python-server.schema.user",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "python-server.app",
        "description": "python-server.app",
        "peekOfCode": "def create_app():\n    app = Flask(__name__)\n    app.config.from_object(Config)\n    CORS(app)\n    jwt = JWTManager(app)\n    mongo = PyMongo(app)\n    # Connect to MongoDB using py-mongo\n    client = MongoClient(app.config['MONGO_URI'], connect=True)\n    db = client[app.config['MONGODB_DATABASE']]\n    # Define the user table here",
        "detail": "python-server.app",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "python-server.config",
        "description": "python-server.config",
        "peekOfCode": "class Config:\n    MONGO_URI = os.getenv(\"MONGODB_URI\")\n    JWT_SECRET_KEY = os.getenv(\"JWT_SECRET_KEY\")\n    MONGODB_DATABASE = os.getenv(\"MONGODB_DATABASE\")\n    MONGODB_USER = os.getenv(\"MONGODB_USER\")\n    EMAIL_SENDER = os.getenv(\"EMAIL_SENDER\")\n    EMAIL_PASSWORD = os.getenv(\"EMAIL_PASSWORD\")\n    PUBLIC_LINK = os.getenv(\"PUBLIC_LINK\")\n    MONGODB_HISTORY = os.getenv(\"MONGODB_HISTORY\")\n    MONGODB_PROJECT = os.getenv(\"MONGODB_PROJECT\")",
        "detail": "python-server.config",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "python-server.main",
        "description": "python-server.main",
        "peekOfCode": "def index():\n    try:\n        return jsonify({\"message\": \"Connected to server\", \"success\":True}), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e), \"success\":False}), 500\nif __name__ == '__main__':\n    port = int(os.environ.get('PORT', 8000))\n    app.run( host='0.0.0.0', port=port)\n    # app.run(debug=True, host='0.0.0.0', port=port)",
        "detail": "python-server.main",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "website.node_modules.flatted.python.flatted",
        "description": "website.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "website.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "website.node_modules.flatted.python.flatted",
        "description": "website.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "website.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "website.node_modules.flatted.python.flatted",
        "description": "website.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "website.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "website.node_modules.flatted.python.flatted",
        "description": "website.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "website.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "website.node_modules.flatted.python.test",
        "description": "website.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "website.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "website.node_modules.flatted.python.test",
        "description": "website.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "website.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "website.node_modules.flatted.python.test",
        "description": "website.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "website.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "website.node_modules.flatted.python.test",
        "description": "website.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "website.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "website.node_modules.flatted.python.test",
        "description": "website.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "website.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "website.node_modules.flatted.python.test",
        "description": "website.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "website.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "website.node_modules.flatted.python.test",
        "description": "website.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "website.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "website.node_modules.flatted.python.test",
        "description": "website.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "website.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "website.node_modules.flatted.python.test",
        "description": "website.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "website.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "website.node_modules.flatted.python.test",
        "description": "website.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "website.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "website.node_modules.flatted.python.test",
        "description": "website.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "website.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "website.node_modules.flatted.python.test",
        "description": "website.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "website.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "website.node_modules.flatted.python.test",
        "description": "website.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "website.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "website.node_modules.flatted.python.test",
        "description": "website.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "website.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "website.node_modules.flatted.python.test",
        "description": "website.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "website.node_modules.flatted.python.test",
        "documentation": {}
    }
]